-
 !record {model: stock.location, id: location_opening}:
    name: opening
    usage: inventory
-
 !record {model: product.product, id: product_icecream}:
    default_code: 001
    name: Ice Cream
    type: product
    categ_id: product.product_category_1
    list_price: 100.0
    standard_price: 70.0
    uom_id: product.product_uom_kgm
    uom_po_id: product.product_uom_kgm
    procure_method: make_to_stock
    property_stock_inventory: location_opening
    valuation: real_time
    cost_method: average
    property_stock_account_input: account.o_expense
    property_stock_account_output: account.o_income
    description: Ice cream can be mass-produced and thus is widely available in developed parts of the world. Ice cream can be purchased in large cartons (vats and squrounds) from supermarkets and grocery stores, in smaller quantities from ice cream shops, convenience stores, and milk bars, and in individual servings from small carts or vans at public events.
-
 !record {model: stock.production.lot, id: lot_icecream_0}:
    name: Lot0 for Ice cream
    product_id: product_icecream
-
  I create a draft Sale Order
-
  !record {model: sale.order, id: sale_order}:
    partner_id: base.res_partner_2
    partner_invoice_id: base.res_partner_address_3
    partner_shipping_id: base.res_partner_address_3
    pricelist_id: 1
    order_policy: picking
    order_line:
      - product_id: product_icecream
        product_uom_qty: 1.0
        product_uom: 1
        price_unit: 100.0
-
  I confirm the quotation with Invoice based on deliveries policy.
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order}
-
  Now, I dispatch delivery order.
-
  !python {model: stock.partial.picking}: |
    order = self.pool.get('sale.order').browse(cr, uid, ref("sale_order"))
    for pick in order.picking_ids:
        data = pick.force_assign()
        if data == True:
          partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick.id]})
          partial = self.browse(cr, uid, partial_id)
          partial.move_ids[0].write({
              'prodlot_id': ref("lot_icecream_0"),
              })
          self.do_partial(cr, uid, [partial_id])
-
  I create Invoice from Delivery Order.
-
  !python {model: stock.invoice.onshipping}: |
    sale = self.pool.get('sale.order')
    sale_order = sale.browse(cr, uid, ref("sale_order"))
    ship_ids = [x.id for x in sale_order.picking_ids]
    wiz_id = self.create(cr, uid, {'journal_id': ref('account.sales_journal')},
      {'active_ids': ship_ids, 'active_model': 'stock.picking'})
    self.create_invoice(cr, uid, [wiz_id], {"active_ids": ship_ids, "active_id": ship_ids[0]})
-
  I check the invoice details after dispatched delivery.
-
  !python {model: sale.order}: |
    order = self.browse(cr, uid, ref("sale_order"))
    assert order.invoice_ids, "Invoice is not created."
    ac = order.partner_invoice_id.property_account_receivable.id
    for invoice in order.invoice_ids:
        invoice.load_lines_lots()
        assert invoice.invoice_line[0].formatted_note == '<ul> <li>S/N Lot0 for Ice cream</li> </ul>', "Wrgong formatted note for '%s' line" % invoice.invoice_line[0].name
-
  I create a new draft Sale Order
-
  !record {model: sale.order, id: sale_order_2}:
    partner_id: base.res_partner_2
    partner_invoice_id: base.res_partner_address_3
    partner_shipping_id: base.res_partner_address_3
    pricelist_id: 1
    order_policy: picking
    order_line:
      - product_id: product_icecream
        product_uom_qty: 2.0
        product_uom: 1
        price_unit: 100.0
-
 !record {model: stock.production.lot, id: lot_icecream_1}:
    name: Lot1 for Ice cream
    product_id: product_icecream
-
  I confirm the quotation with Invoice based on deliveries policy.
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_2}
-
  Now, I split serial number.
-
    !python {model: stock.picking}: |
      order = self.pool.get('sale.order').browse(cr, uid, ref("sale_order_2"))
      move_ids = [x.id for x in order.picking_ids[0].move_lines]
      context.update({'active_model': 'stock.move', 'active_id': move_ids[0], 'active_ids': move_ids})
-
  !record {model: stock.move.split, id: split_lot_incomming}:
    line_ids:
        - name: lot_icecream_0
          quantity: 1
        - name: lot_icecream_1
          quantity: 1

-
 !python {model: stock.move.split }: |
    self.split_lot(cr, uid, [ref('split_lot_incomming')], context=context)
-
  Now, I dispatch delivery order.
-
  !python {model: stock.partial.picking}: |
    order = self.pool.get('sale.order').browse(cr, uid, ref("sale_order_2"))
    for pick in order.picking_ids:
        data = pick.force_assign()
        if data == True:
          partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick.id]})
          self.do_partial(cr, uid, [partial_id])
-
  I create Invoice from Delivery Order.
-
  !python {model: stock.invoice.onshipping}: |
    sale = self.pool.get('sale.order')
    sale_order = sale.browse(cr, uid, ref("sale_order_2"))
    ship_ids = [x.id for x in sale_order.picking_ids]
    wiz_id = self.create(cr, uid, {'journal_id': ref('account.sales_journal')},
      {'active_ids': ship_ids, 'active_model': 'stock.picking'})
    self.create_invoice(cr, uid, [wiz_id], {"active_ids": ship_ids, "active_id": ship_ids[0]})
-
  I check the invoice lines.
-
  !python {model: sale.order}: |
    order = self.browse(cr, uid, ref("sale_order"))
    assert order.invoice_ids, "Invoice is not created."
    for invoice in order.invoice_ids:
        invoice.load_lines_lots()
        for line in invoice.invoice_line:
            assert len(line.prod_lot_ids) == 1,"there must be one lot only"

